Here are some common problems solved using the sliding window technique, along with their solutions in Java:

### 1. Maximum Sum Subarray of Size `K`

**Problem**: Find the maximum sum of any subarray of size `K`.

**Solution**:
```java
public class MaximumSumSubarrayOfSizeK {
    public static int findMaxSumSubarray(int[] arr, int k) {
        int maxSum = 0, windowSum = 0;

        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }

        maxSum = windowSum;

        for (int i = k; i < arr.length; i++) {
            windowSum += arr[i] - arr[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {2, 1, 5, 1, 3, 2};
        int k = 3;
        System.out.println("Maximum sum of subarray of size " + k + ": " + findMaxSumSubarray(arr, k)); // Output: 9
    }
}
```

### 2. Longest Substring with At Most `K` Distinct Characters

**Problem**: Find the length of the longest substring that contains at most `K` distinct characters.

**Solution**:
```java
import java.util.HashMap;
import java.util.Map;

public class LongestSubstringKDistinct {
    public static int longestSubstringKDistinct(String s, int k) {
        if (s == null || s.length() == 0 || k == 0) {
            return 0;
        }

        int left = 0, maxLength = 0;
        Map<Character, Integer> charCountMap = new HashMap<>();

        for (int right = 0; right < s.length(); right++) {
            char rightChar = s.charAt(right);
            charCountMap.put(rightChar, charCountMap.getOrDefault(rightChar, 0) + 1);

            while (charCountMap.size() > k) {
                char leftChar = s.charAt(left);
                charCountMap.put(leftChar, charCountMap.get(leftChar) - 1);
                if (charCountMap.get(leftChar) == 0) {
                    charCountMap.remove(leftChar);
                }
                left++;
            }

            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        String s = "eceba";
        int k = 2;
        System.out.println("Longest substring with " + k + " distinct characters: " + longestSubstringKDistinct(s, k)); // Output: 3 ("ece")
    }
}
```

### 3. Smallest Subarray with Sum Greater Than or Equal to `S`

**Problem**: Find the length of the smallest subarray whose sum is greater than or equal to a given number `S`.

**Solution**:
```java
public class SmallestSubarrayWithSum {
    public static int minSubArrayLen(int s, int[] nums) {
        int minLength = Integer.MAX_VALUE;
        int left = 0, sum = 0;

        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];

            while (sum >= s) {
                minLength = Math.max(minLength, right - left + 1);
                sum -= nums[left++];
            }
        }

        return minLength == Integer.MAX_VALUE ? 0 : minLength;
    }

    public static void main(String[] args) {
        int s = 7;
        int[] nums = {2, 3, 1, 2, 4, 3};
        System.out.println("Smallest subarray length: " + minSubArrayLen(s, nums)); // Output: 2
    }
}
```

### 4. Longest Substring Without Repeating Characters

**Problem**: Find the length of the longest substring without repeating characters.

**Solution**:
```java
import java.util.HashSet;
import java.util.Set;

public class LongestSubstringWithoutRepeating {
    public static int lengthOfLongestSubstring(String s) {
        Set<Character> charSet = new HashSet<>();
        int left = 0, maxLength = 0;

        for (int right = 0; right < s.length(); right++) {
            while (charSet.contains(s.charAt(right))) {
                charSet.remove(s.charAt(left++));
            }
            charSet.add(s.charAt(right));
            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        String s = "abcabcbb";
        System.out.println("Length of longest substring without repeating characters: " + lengthOfLongestSubstring(s)); // Output: 3 ("abc")
    }
}
```

### 5. Sliding Window Maximum

**Problem**: Given an array and an integer `K`, find the maximum element in every contiguous subarray of size `K`.

**Solution**:
```java
import java.util.ArrayDeque;
import java.util.Deque;

public class SlidingWindowMaximum {
    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) {
            return new int[0];
        }

        int n = nums.length;
        int[] result = new int[n - k + 1];
        int ri = 0;
        Deque<Integer> deque = new ArrayDeque<>();

        for (int i = 0; i < nums.length; i++) {
            while (!deque.isEmpty() && deque.peek() < i - k + 1) {
                deque.poll();
            }

            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }

            deque.offer(i);
            if (i >= k - 1) {
                result[ri++] = nums[deque.peek()];
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        int[] result = maxSlidingWindow(nums, k);
        System.out.print("Maximum values in each sliding window: ");
        for (int num : result) {
            System.out.print(num + " "); // Output: 3 3 5 5 6 7
        }
    }
}
```

### 6. Longest Subarray of Ones After K Flips

**Problem**: Given a binary array, find the longest subarray of 1s that can be obtained by flipping at most `K` 0s.

**Solution**:
```java
public class LongestSubarrayOnesAfterKFlips {
    public static int longestOnes(int[] A, int K) {
        int left = 0, right;
        for (right = 0; right < A.length; right++) {
            if (A[right] == 0) K--;
            if (K < 0) {
                if (A[left] == 0) K++;
                left++;
            }
        }
        return right - left;
    }

    public static void main(String[] args) {
        int[] A = {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0};
        int K = 2;
        System.out.println("Longest subarray of 1s after " + K + " flips: " + longestOnes(A, K)); // Output: 6
    }
}
```

### 7. Fruit Into Baskets (Longest Subarray with At Most Two Distinct Elements)

**Problem**: Given an array representing types of fruits, find the length of the longest subarray with at most two distinct types of fruits.

**Solution**:
```java
import java.util.HashMap;
import java.util.Map;

public class FruitIntoBaskets {
    public static int totalFruit(int[] tree) {
        Map<Integer, Integer> count = new HashMap<>();
        int i = 0, max = 0;

        for (int j = 0; j < tree.length; j++) {
            count.put(tree[j], count.getOrDefault(tree[j], 0) + 1);

            while (count.size() > 2) {
                count.put(tree[i], count.get(tree[i]) - 1);
                if (count.get(tree[i]) == 0) {
                    count.remove(tree[i]);
                }
                i++;
            }

            max = Math.max(max, j - i + 1);
        }

        return max;
    }

    public static void main(String[] args) {
        int[] tree = {1, 2, 1, 2, 3, 2, 2, 2, 3};
        System.out.println("Total fruits that can be collected: " + totalFruit(tree)); // Output: 5
    }
}
```

These problems and solutions illustrate how the sliding window technique can be effectively applied to a wide range of problems involving arrays and strings.
